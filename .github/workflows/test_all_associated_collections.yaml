# This workflow will be executed when a full execution of all
# collections associated with all collections should be performed.
# The environment to run against will be either production or UAT, and is
# a required parameter of the workflow_call trigger.
name: Full Harmony Autotester run

on:
  workflow_call:
    inputs:
      harmony_environment:
        required: true
        type: string

jobs:
  identify_all_services:
    runs-on: ubuntu-latest
    environment: ${{ inputs.harmony_environment }}
    name: Identify All Harmony Services
    outputs:
      all_services: "${{ steps.find_all_services.outputs.all_services }}"

    steps:
      - name: Checkout nasa/harmony-autotester repository
        uses: actions/checkout@v4

      - name: Setup Python 3.12 environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r bin/requirements.txt

      - name: Find all services and associated collections
        id: "find_all_services"
        run: |
          python bin/get_all_services.py
        env:
          CMR_GRAPHQL_URL: ${{ vars.CMR_GRAPHQL_URL }}
          EDL_URL: ${{ vars.EDL_URL }}
          EDL_USER: ${{ secrets.EDL_USER }}
          EDL_PASSWORD: ${{ secrets.EDL_PASSWORD }}

  test_all_services:
    runs-on: ubuntu-latest
    environment: ${{ inputs.harmony_environment }}
    needs: identify_all_services
    strategy:
      matrix:
        service: ${{ fromJson(needs.identify_all_services.outputs.all_services) }}
    name: ${{ matrix.service.name }}
    permissions:
      # Ensure workflow can create or update GitHub issues
      issues: write

    steps:
      - name: Checkout nasa/harmony-autotester repository
        uses: actions/checkout@v4

      - name: Setup Python 3.12 environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Find test directory for this service
        id: "find_test_directory"
        run: |
          python bin/get_service_test_directory.py
        env:
          SERVICE_CONCEPT_ID: ${{ matrix.service.concept_id }}
          EARTHDATA_ENVIRONMENT: ${{ vars.EARTHDATA_ENVIRONMENT }}

      # Steps below here only executed if there is a relevant test directory
      - name: Install dependencies
        if: ${{ steps.find_test_directory.outputs.test_directory != '' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ steps.find_test_directory.outputs.test_directory}}/requirements.txt

      - name: Run test suite
        id: "run_test_suite"
        if: ${{ steps.find_test_directory.outputs.test_directory != '' }}
        run: |
          pytest ${{ steps.find_test_directory.outputs.test_directory }}/
        env:
          EARTHDATA_ENVIRONMENT: ${{ vars.EARTHDATA_ENVIRONMENT }}
          EDL_USER: ${{ secrets.EDL_USER }}
          EDL_PASSWORD: ${{ secrets.EDL_PASSWORD }}
          SERVICE_COLLECTIONS: ${{ toJSON(matrix.service.collections) }}
          TEST_DIRECTORY: ${{ steps.find_test_directory.outputs.test_directory }}

      - name: Create or update GitHub issues for collections with updated results
        # This step runs even if there are no failures, because some collections
        # may have previously failed, but now succeed (or have be disassociated)
        if: ${{ steps.find_test_directory.outputs.test_directory != ''  && !cancelled() }}
        run: |
          python bin/update_github_issues.py
        env:
          EARTHDATA_ENVIRONMENT: ${{ vars.EARTHDATA_ENVIRONMENT }}
          GH_REPOSITORY: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SERVICE_COLLECTIONS: ${{ toJSON(matrix.service.collections) }}
          SERVICE_NAME: ${{ matrix.service.name }}
          TEST_DIRECTORY:  ${{ steps.find_test_directory.outputs.test_directory }}

      - name: Save test outputs for failures
        if: ${{ steps.find_test_directory.outputs.test_directory != '' && failure() && steps.run_test_suite.conclusion == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service.name }}
          path: ${{ steps.find_test_directory.outputs.test_directory }}/test_output.json
